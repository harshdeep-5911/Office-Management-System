{"ast":null,"code":"import { createSlice, createAsyncThunk, createAction } from '@reduxjs/toolkit';\nimport authService from './authService';\nimport { extractErrorMessage } from '../../utils';\n\n// Get user from localStorage\nconst user = JSON.parse(localStorage.getItem('user'));\nconst initialState = {\n  user: user || null,\n  isLoading: false\n};\n\n// Register user\nexport const register = createAsyncThunk('auth/register', async (user, thunkAPI) => {\n  try {\n    return await authService.register(user);\n  } catch (error) {\n    return thunkAPI.rejectWithValue(extractErrorMessage(error));\n  }\n});\n\n// Login user\nexport const login = createAsyncThunk('auth/login', async (user, thunkAPI) => {\n  try {\n    return await authService.login(user);\n  } catch (error) {\n    return thunkAPI.rejectWithValue(extractErrorMessage(error));\n  }\n});\n\n// Logout user\nexport const logout = createAsyncThunk('auth/logout', async () => {\n  authService.logout();\n});\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(register.pending, state => {\n      state.isLoading = true;\n    }).addCase(register.fulfilled, (state, action) => {\n      state.user = action.payload;\n      state.isLoading = false;\n    }).addCase(register.rejected, state => {\n      state.isLoading = false;\n    }).addCase(login.pending, state => {\n      state.isLoading = true;\n    }).addCase(login.fulfilled, (state, action) => {\n      state.user = action.payload;\n      state.isLoading = false;\n    }).addCase(login.rejected, state => {\n      state.isLoading = false;\n    }).addCase(logout.fulfilled, state => {\n      state.user = null;\n    });\n  }\n});\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","createAction","authService","extractErrorMessage","user","JSON","parse","localStorage","getItem","initialState","isLoading","register","thunkAPI","error","rejectWithValue","login","logout","authSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","reducer"],"sources":["C:/Users/asus/Desktop/New folder/Office-Management-System/frontend/src/features/auth/authSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk, createAction } from '@reduxjs/toolkit';\r\nimport authService from './authService';\r\nimport { extractErrorMessage } from '../../utils';\r\n\r\n// Get user from localStorage\r\nconst user = JSON.parse(localStorage.getItem('user'));\r\n\r\nconst initialState = {\r\n  user: user || null,\r\n  isLoading: false,\r\n};\r\n\r\n// Register user\r\nexport const register = createAsyncThunk(\r\n  'auth/register',\r\n  async (user, thunkAPI) => {\r\n    try {\r\n      return await authService.register(user);\r\n    } catch (error) {\r\n      return thunkAPI.rejectWithValue(extractErrorMessage(error));\r\n    }\r\n  }\r\n);\r\n\r\n// Login user\r\nexport const login = createAsyncThunk(\r\n  'auth/login',\r\n  async (user, thunkAPI) => {\r\n    try {\r\n      return await authService.login(user);\r\n    } catch (error) {\r\n      return thunkAPI.rejectWithValue(extractErrorMessage(error));\r\n    }\r\n  }\r\n);\r\n\r\n// Logout user\r\nexport const logout = createAsyncThunk('auth/logout', async () => {\r\n  authService.logout();\r\n});\r\n\r\nexport const authSlice = createSlice({\r\n  name: 'auth',\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(register.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(register.fulfilled, (state, action) => {\r\n        state.user = action.payload;\r\n        state.isLoading = false;\r\n      })\r\n      .addCase(register.rejected, (state) => {\r\n        state.isLoading = false;\r\n      })\r\n      .addCase(login.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(login.fulfilled, (state, action) => {\r\n        state.user = action.payload;\r\n        state.isLoading = false;\r\n      })\r\n      .addCase(login.rejected, (state) => {\r\n        state.isLoading = false;\r\n      })\r\n      .addCase(logout.fulfilled, (state) => {\r\n        state.user = null;\r\n      });\r\n  },\r\n});\r\n\r\nexport default authSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,EAAEC,YAAY,QAAQ,kBAAkB;AAC9E,OAAOC,WAAW,MAAM,eAAe;AACvC,SAASC,mBAAmB,QAAQ,aAAa;;AAEjD;AACA,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;AAErD,MAAMC,YAAY,GAAG;EACnBL,IAAI,EAAEA,IAAI,IAAI,IAAI;EAClBM,SAAS,EAAE;AACb,CAAC;;AAED;AACA,OAAO,MAAMC,QAAQ,GAAGX,gBAAgB,CACtC,eAAe,EACf,OAAOI,IAAI,EAAEQ,QAAQ,KAAK;EACxB,IAAI;IACF,OAAO,MAAMV,WAAW,CAACS,QAAQ,CAACP,IAAI,CAAC;EACzC,CAAC,CAAC,OAAOS,KAAK,EAAE;IACd,OAAOD,QAAQ,CAACE,eAAe,CAACX,mBAAmB,CAACU,KAAK,CAAC,CAAC;EAC7D;AACF,CACF,CAAC;;AAED;AACA,OAAO,MAAME,KAAK,GAAGf,gBAAgB,CACnC,YAAY,EACZ,OAAOI,IAAI,EAAEQ,QAAQ,KAAK;EACxB,IAAI;IACF,OAAO,MAAMV,WAAW,CAACa,KAAK,CAACX,IAAI,CAAC;EACtC,CAAC,CAAC,OAAOS,KAAK,EAAE;IACd,OAAOD,QAAQ,CAACE,eAAe,CAACX,mBAAmB,CAACU,KAAK,CAAC,CAAC;EAC7D;AACF,CACF,CAAC;;AAED;AACA,OAAO,MAAMG,MAAM,GAAGhB,gBAAgB,CAAC,aAAa,EAAE,YAAY;EAChEE,WAAW,CAACc,MAAM,CAAC,CAAC;AACtB,CAAC,CAAC;AAEF,OAAO,MAAMC,SAAS,GAAGlB,WAAW,CAAC;EACnCmB,IAAI,EAAE,MAAM;EACZT,YAAY;EACZU,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACX,QAAQ,CAACY,OAAO,EAAGC,KAAK,IAAK;MACpCA,KAAK,CAACd,SAAS,GAAG,IAAI;IACxB,CAAC,CAAC,CACDY,OAAO,CAACX,QAAQ,CAACc,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAC9CF,KAAK,CAACpB,IAAI,GAAGsB,MAAM,CAACC,OAAO;MAC3BH,KAAK,CAACd,SAAS,GAAG,KAAK;IACzB,CAAC,CAAC,CACDY,OAAO,CAACX,QAAQ,CAACiB,QAAQ,EAAGJ,KAAK,IAAK;MACrCA,KAAK,CAACd,SAAS,GAAG,KAAK;IACzB,CAAC,CAAC,CACDY,OAAO,CAACP,KAAK,CAACQ,OAAO,EAAGC,KAAK,IAAK;MACjCA,KAAK,CAACd,SAAS,GAAG,IAAI;IACxB,CAAC,CAAC,CACDY,OAAO,CAACP,KAAK,CAACU,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAC3CF,KAAK,CAACpB,IAAI,GAAGsB,MAAM,CAACC,OAAO;MAC3BH,KAAK,CAACd,SAAS,GAAG,KAAK;IACzB,CAAC,CAAC,CACDY,OAAO,CAACP,KAAK,CAACa,QAAQ,EAAGJ,KAAK,IAAK;MAClCA,KAAK,CAACd,SAAS,GAAG,KAAK;IACzB,CAAC,CAAC,CACDY,OAAO,CAACN,MAAM,CAACS,SAAS,EAAGD,KAAK,IAAK;MACpCA,KAAK,CAACpB,IAAI,GAAG,IAAI;IACnB,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAea,SAAS,CAACY,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}