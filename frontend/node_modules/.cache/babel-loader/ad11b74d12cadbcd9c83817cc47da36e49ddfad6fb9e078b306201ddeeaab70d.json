{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport ticketService from './ticketService';\n// NOTE: use a extractErrorMessage function to save some repetition\nimport { extractErrorMessage } from '../../utils';\n\n// NOTE: no need for isLoading, isSuccess, isError or message as we can leverage\n// our AsyncThunkAction and get Promise reolved or rejected messages at\n// component level\nconst initialState = {\n  tickets: null,\n  ticket: null\n};\n\n// Create new ticket\nexport const createTicket = createAsyncThunk('tickets/create', async (ticketData, thunkAPI) => {\n  try {\n    const token = thunkAPI.getState().auth.user.token;\n    return await ticketService.createTicket(ticketData, token);\n  } catch (error) {\n    return thunkAPI.rejectWithValue(extractErrorMessage(error));\n  }\n});\n\n// Get user tickets\nexport const getTickets = createAsyncThunk('tickets/getAll', async (_, thunkAPI) => {\n  try {\n    const token = thunkAPI.getState().auth.user.token;\n    return await ticketService.getTickets(token);\n  } catch (error) {\n    return thunkAPI.rejectWithValue(extractErrorMessage(error));\n  }\n});\n\n// Get user ticket\nexport const getTicket = createAsyncThunk('tickets/get', async (ticketId, thunkAPI) => {\n  try {\n    const token = thunkAPI.getState().auth.user.token;\n    return await ticketService.getTicket(ticketId, token);\n  } catch (error) {\n    return thunkAPI.rejectWithValue(extractErrorMessage(error));\n  }\n});\n\n// Close ticket\nexport const closeTicket = createAsyncThunk('tickets/close', async (ticketId, thunkAPI) => {\n  try {\n    const token = thunkAPI.getState().auth.user.token;\n    return await ticketService.closeTicket(ticketId, token);\n  } catch (error) {\n    return thunkAPI.rejectWithValue(extractErrorMessage(error));\n  }\n});\n\n// NOTE: removed loading, isSuccess state as it can be infered from presence or\n// absence of tickets for simpler state management with no need for a reset\n// function\n\nexport const ticketSlice = createSlice({\n  name: 'ticket',\n  initialState,\n  extraReducers: builder => {\n    builder.addCase(getTickets.pending, state => {\n      // NOTE: clear single ticket on tickets page, this replaces need for\n      // loading state on individual ticket\n      state.ticket = null;\n    }).addCase(getTickets.fulfilled, (state, action) => {\n      state.tickets = action.payload;\n    }).addCase(getTicket.fulfilled, (state, action) => {\n      state.ticket = action.payload;\n    }).addCase(closeTicket.fulfilled, (state, action) => {\n      state.ticket = action.payload;\n      state.tickets = state.tickets.map(ticket => ticket._id === action.payload._id ? action.payload : ticket);\n    });\n  }\n});\nexport default ticketSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","ticketService","extractErrorMessage","initialState","tickets","ticket","createTicket","ticketData","thunkAPI","token","getState","auth","user","error","rejectWithValue","getTickets","_","getTicket","ticketId","closeTicket","ticketSlice","name","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","map","_id","reducer"],"sources":["C:/Users/asus/Desktop/New folder/Office-Management-System/frontend/src/features/tickets/ticketSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\r\nimport ticketService from './ticketService'\r\n// NOTE: use a extractErrorMessage function to save some repetition\r\nimport { extractErrorMessage } from '../../utils'\r\n\r\n// NOTE: no need for isLoading, isSuccess, isError or message as we can leverage\r\n// our AsyncThunkAction and get Promise reolved or rejected messages at\r\n// component level\r\nconst initialState = {\r\n  tickets: null,\r\n  ticket: null,\r\n}\r\n\r\n// Create new ticket\r\nexport const createTicket = createAsyncThunk(\r\n  'tickets/create',\r\n  async (ticketData, thunkAPI) => {\r\n    try {\r\n      const token = thunkAPI.getState().auth.user.token\r\n      return await ticketService.createTicket(ticketData, token)\r\n    } catch (error) {\r\n      return thunkAPI.rejectWithValue(extractErrorMessage(error))\r\n    }\r\n  }\r\n)\r\n\r\n// Get user tickets\r\nexport const getTickets = createAsyncThunk(\r\n  'tickets/getAll',\r\n  async (_, thunkAPI) => {\r\n    try {\r\n      const token = thunkAPI.getState().auth.user.token\r\n      return await ticketService.getTickets(token)\r\n    } catch (error) {\r\n      return thunkAPI.rejectWithValue(extractErrorMessage(error))\r\n    }\r\n  }\r\n)\r\n\r\n// Get user ticket\r\nexport const getTicket = createAsyncThunk(\r\n  'tickets/get',\r\n  async (ticketId, thunkAPI) => {\r\n    try {\r\n      const token = thunkAPI.getState().auth.user.token\r\n      return await ticketService.getTicket(ticketId, token)\r\n    } catch (error) {\r\n      return thunkAPI.rejectWithValue(extractErrorMessage(error))\r\n    }\r\n  }\r\n)\r\n\r\n// Close ticket\r\nexport const closeTicket = createAsyncThunk(\r\n  'tickets/close',\r\n  async (ticketId, thunkAPI) => {\r\n    try {\r\n      const token = thunkAPI.getState().auth.user.token\r\n      return await ticketService.closeTicket(ticketId, token)\r\n    } catch (error) {\r\n      return thunkAPI.rejectWithValue(extractErrorMessage(error))\r\n    }\r\n  }\r\n)\r\n\r\n// NOTE: removed loading, isSuccess state as it can be infered from presence or\r\n// absence of tickets for simpler state management with no need for a reset\r\n// function\r\n\r\nexport const ticketSlice = createSlice({\r\n  name: 'ticket',\r\n  initialState,\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(getTickets.pending, (state) => {\r\n        // NOTE: clear single ticket on tickets page, this replaces need for\r\n        // loading state on individual ticket\r\n        state.ticket = null\r\n      })\r\n      .addCase(getTickets.fulfilled, (state, action) => {\r\n        state.tickets = action.payload\r\n      })\r\n      .addCase(getTicket.fulfilled, (state, action) => {\r\n        state.ticket = action.payload\r\n      })\r\n      .addCase(closeTicket.fulfilled, (state, action) => {\r\n        state.ticket = action.payload\r\n        state.tickets = state.tickets.map((ticket) =>\r\n          ticket._id === action.payload._id ? action.payload : ticket\r\n        )\r\n      })\r\n  },\r\n})\r\n\r\nexport default ticketSlice.reducer\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}