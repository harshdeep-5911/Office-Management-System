{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport noteService from './noteService';\n// NOTE: use a extractErrorMessage function to save some repetition\nimport { extractErrorMessage } from '../../utils';\n\n// NOTE: removed isLoading, isSuccess, isError, message and reset\n// loading can be infered from presence or absence of notes\n// success can be infered from presence or absence of notes\n// error meassages can be recieved at component level from our AsyncThunkAction\n// reset was never actually used\n\nconst initialState = {\n  notes: null\n};\n\n// Get ticket notes\nexport const getNotes = createAsyncThunk('notes/getAll', async (ticketId, thunkAPI) => {\n  try {\n    const token = thunkAPI.getState().auth.user.token;\n    return await noteService.getNotes(ticketId, token);\n  } catch (error) {\n    return thunkAPI.rejectWithValue(extractErrorMessage(error));\n  }\n});\n\n// Create ticket note\nexport const createNote = createAsyncThunk('notes/create', async ({\n  noteText,\n  ticketId\n}, thunkAPI) => {\n  try {\n    const token = thunkAPI.getState().auth.user.token;\n    return await noteService.createNote(noteText, ticketId, token);\n  } catch (error) {\n    return thunkAPI.rejectWithValue(extractErrorMessage(error));\n  }\n});\nexport const noteSlice = createSlice({\n  name: 'note',\n  initialState,\n  extraReducers: builder => {\n    builder.addCase(getNotes.pending, state => {\n      // NOTE: reset notes to null on pending so we can show a Spinner while\n      // fetching notes\n      state.notes = null;\n    }).addCase(getNotes.fulfilled, (state, action) => {\n      // NOTE: even if there are no notes for the ticket we get an empty\n      // array, so we can use this to detect if we have notes or are fetching\n      // notes. Payload will be an array of notes or an empty array, either\n      // means we have finished fetching the notes.\n      state.notes = action.payload;\n    }).addCase(createNote.fulfilled, (state, action) => {\n      state.notes.push(action.payload);\n    });\n  }\n});\nexport default noteSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","noteService","extractErrorMessage","initialState","notes","getNotes","ticketId","thunkAPI","token","getState","auth","user","error","rejectWithValue","createNote","noteText","noteSlice","name","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","push","reducer"],"sources":["C:/Users/asus/Desktop/New folder/Office-Management-System/frontend/src/features/notes/noteSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport noteService from './noteService'\n// NOTE: use a extractErrorMessage function to save some repetition\nimport { extractErrorMessage } from '../../utils'\n\n// NOTE: removed isLoading, isSuccess, isError, message and reset\n// loading can be infered from presence or absence of notes\n// success can be infered from presence or absence of notes\n// error meassages can be recieved at component level from our AsyncThunkAction\n// reset was never actually used\n\nconst initialState = {\n  notes: null,\n}\n\n// Get ticket notes\nexport const getNotes = createAsyncThunk(\n  'notes/getAll',\n  async (ticketId, thunkAPI) => {\n    try {\n      const token = thunkAPI.getState().auth.user.token\n      return await noteService.getNotes(ticketId, token)\n    } catch (error) {\n      return thunkAPI.rejectWithValue(extractErrorMessage(error))\n    }\n  }\n)\n\n// Create ticket note\nexport const createNote = createAsyncThunk(\n  'notes/create',\n  async ({ noteText, ticketId }, thunkAPI) => {\n    try {\n      const token = thunkAPI.getState().auth.user.token\n      return await noteService.createNote(noteText, ticketId, token)\n    } catch (error) {\n      return thunkAPI.rejectWithValue(extractErrorMessage(error))\n    }\n  }\n)\n\nexport const noteSlice = createSlice({\n  name: 'note',\n  initialState,\n  extraReducers: (builder) => {\n    builder\n      .addCase(getNotes.pending, (state) => {\n        // NOTE: reset notes to null on pending so we can show a Spinner while\n        // fetching notes\n        state.notes = null\n      })\n      .addCase(getNotes.fulfilled, (state, action) => {\n        // NOTE: even if there are no notes for the ticket we get an empty\n        // array, so we can use this to detect if we have notes or are fetching\n        // notes. Payload will be an array of notes or an empty array, either\n        // means we have finished fetching the notes.\n        state.notes = action.payload\n      })\n      .addCase(createNote.fulfilled, (state, action) => {\n        state.notes.push(action.payload)\n      })\n  },\n})\n\nexport default noteSlice.reducer\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,WAAW,MAAM,eAAe;AACvC;AACA,SAASC,mBAAmB,QAAQ,aAAa;;AAEjD;AACA;AACA;AACA;AACA;;AAEA,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,OAAO,MAAMC,QAAQ,GAAGL,gBAAgB,CACtC,cAAc,EACd,OAAOM,QAAQ,EAAEC,QAAQ,KAAK;EAC5B,IAAI;IACF,MAAMC,KAAK,GAAGD,QAAQ,CAACE,QAAQ,CAAC,CAAC,CAACC,IAAI,CAACC,IAAI,CAACH,KAAK;IACjD,OAAO,MAAMP,WAAW,CAACI,QAAQ,CAACC,QAAQ,EAAEE,KAAK,CAAC;EACpD,CAAC,CAAC,OAAOI,KAAK,EAAE;IACd,OAAOL,QAAQ,CAACM,eAAe,CAACX,mBAAmB,CAACU,KAAK,CAAC,CAAC;EAC7D;AACF,CACF,CAAC;;AAED;AACA,OAAO,MAAME,UAAU,GAAGd,gBAAgB,CACxC,cAAc,EACd,OAAO;EAAEe,QAAQ;EAAET;AAAS,CAAC,EAAEC,QAAQ,KAAK;EAC1C,IAAI;IACF,MAAMC,KAAK,GAAGD,QAAQ,CAACE,QAAQ,CAAC,CAAC,CAACC,IAAI,CAACC,IAAI,CAACH,KAAK;IACjD,OAAO,MAAMP,WAAW,CAACa,UAAU,CAACC,QAAQ,EAAET,QAAQ,EAAEE,KAAK,CAAC;EAChE,CAAC,CAAC,OAAOI,KAAK,EAAE;IACd,OAAOL,QAAQ,CAACM,eAAe,CAACX,mBAAmB,CAACU,KAAK,CAAC,CAAC;EAC7D;AACF,CACF,CAAC;AAED,OAAO,MAAMI,SAAS,GAAGjB,WAAW,CAAC;EACnCkB,IAAI,EAAE,MAAM;EACZd,YAAY;EACZe,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACf,QAAQ,CAACgB,OAAO,EAAGC,KAAK,IAAK;MACpC;MACA;MACAA,KAAK,CAAClB,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC,CACDgB,OAAO,CAACf,QAAQ,CAACkB,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAC9C;MACA;MACA;MACA;MACAF,KAAK,CAAClB,KAAK,GAAGoB,MAAM,CAACC,OAAO;IAC9B,CAAC,CAAC,CACDL,OAAO,CAACN,UAAU,CAACS,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAChDF,KAAK,CAAClB,KAAK,CAACsB,IAAI,CAACF,MAAM,CAACC,OAAO,CAAC;IAClC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAeT,SAAS,CAACW,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}